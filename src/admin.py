from typing import Any
from fastapi import APIRouter, File, UploadFile, HTTPException
from fastadmin import SqlAlchemyModelAdmin, register
import requests
from sqlalchemy import text
from src import models
from src import database
import os
import uuid
from uuid import uuid4 
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import joinedload

class CustomAdminModel(SqlAlchemyModelAdmin):
    async def orm_delete_obj(self, id: int) -> None:
        sessionmaker = self.get_sessionmaker()
        async with sessionmaker() as session:
            obj = await session.get(self.model_cls, id)
            if obj:
                await session.delete(obj)
                await session.commit()

#    async def orm_save_obj(self, id: int , payload: dict) -> Any:
        """This method is used to save orm/db model object.

        :params id: an id of object.
        :params payload: a dict of payload.
        :return: An object.
        """
 #        print("START PROCESS SAVE")
 #        sessionmaker = self.get_sessionmaker()
 #        async with sessionmaker() as session:
 #            if id:
 #                obj = await session.get(self.model_cls, id)
 #                if not obj:
 #                    return None
 #                for k, v in payload.items():
 #                    setattr(obj, k, v)
 #                await session.merge(obj)
 #                await session.commit()
 #            else:
 #                obj = self.model_cls(**payload)
 #                session.add(obj)
 #                await session.commit()
 #            return await session.get(self.model_cls, getattr(obj, self.get_model_pk_name(self.model_cls)))




@register(models.User)
class UserAdminModel(CustomAdminModel):
    list_display = ("id", "email", "is_admin", "is_active", "is_approved",
            "is_subscribed")
    list_display_links = ("id", "email")
    list_filter = ("id", "email", "is_admin", "is_active", "is_approved",
            "is_subscribed")
    search_fields = ("email",)

    
    db_session_maker = database.AsyncSessionLocal

    async def authenticate(self, username: str, password: str) -> int | None:
        db: Session = database.SessionLocal()
        result = db.execute(text("""select id, email, password from users where email = :email and password = :password and is_admin = true"""), {'email': username, 'password': password})
        result = result.mappings().first()
        if not result:
            return None

        return result.get('id')


@register(models.Animal)
class AnimalAdminModel(CustomAdminModel):
    list_display = ("id", "name", "drugs")
    list_display_links = ("id", "name")
    search_fields = ("name",)

    db_session_maker = database.AsyncSessionLocal


@register(models.Drug)
class DrugAdminModel(CustomAdminModel):
    list_display = ("id", "name", "description", "is_global")
    list_display_links = ("id", "name")
    search_fields = ("name",)

    db_session_maker = database.AsyncSessionLocal

    async def save_model(self, obj=None, request=None, data=None, *args, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∂–∏–≤–æ—Ç–Ω—ã–º"""

        # üõ† –ï—Å–ª–∏ `data` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å –µ–≥–æ –∏–∑ `request`
        if data is None:
            if isinstance(request, dict):
                data = request  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                print("üì• `data` –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –≤–∏–¥–µ `dict` –∏–∑ `request`")
            elif hasattr(request, "json"):
                try:
                    data = await request.json()
                    print("üì• `data` –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ `request.json()`")
                except Exception:
                    raise ValueError("‚ö† –û—à–∏–±–∫–∞: `data` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ `save_model`, –∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å `request.json()`")

        if data is None:
            raise ValueError("‚ö† –û—à–∏–±–∫–∞: `data` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ `request`")

        print(f"üìå –ò—Ç–æ–≥–æ–≤–æ–µ `data`: {data}")

        # üõ† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö
        animal_ids = data.get("animals", [])

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º animals –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞)
        if isinstance(animal_ids, list):
            parsed_animals = []
            for item in animal_ids:
                if isinstance(item, str):  # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç - —Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–±–∏—Ä–∞–µ–º –µ—ë
                    parsed_animals.extend([int(a) for a in item.split(",") if a.strip().isdigit()])
                elif isinstance(item, int):  # –ï—Å–ª–∏ —É–∂–µ int, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    parsed_animals.append(item)
            animal_ids = parsed_animals  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫

        print(f"üìå –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ `animal_ids`: {animal_ids}")

        async with self.db_session_maker() as session:
            async with session.begin():
                # üõ† –ï—Å–ª–∏ `obj` - —ç—Ç–æ ID, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã
                if isinstance(obj, int):
                    print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–∞ Drug –ø–æ ID {obj}")
                    obj = await session.get(models.Drug, obj)

                if obj is None:
                    obj = models.Drug(**{k: v for k, v in data.items() if k != "animals"})
                    session.add(obj)
                    await session.flush()
                    await session.refresh(obj)

                print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ ID {obj.id}")

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
                await session.execute(
                    text("DELETE FROM drugs_animals WHERE drug = :drug_id"),
                    {"drug_id": obj.id}
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –ë–î
                result = await session.execute(
                    text("SELECT id FROM animals WHERE id = ANY(:animal_ids)"),
                    {"animal_ids": animal_ids}
                )
                existing_animals = {row[0] for row in result.fetchall()}

                if not existing_animals:
                    print("‚ùå –û—à–∏–±–∫–∞: –ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
                    values = [{"drug_id": obj.id, "animal_id": animal_id} for animal_id in existing_animals]
                    await session.execute(
                        text("INSERT INTO drugs_animals (drug, animal) VALUES (:drug_id, :animal_id)"),
                        values
                    )
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–≤—è–∑–∏ –≤ drugs_animals: {values}")

            await session.commit()
        return obj





    async def delete_model(self, obj_id):
        async with self.db_session_maker() as session:
            async with session.begin():
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
                obj = await session.get(models.Drug, obj_id)
                if obj is None:
                    print(f"–ü—Ä–µ–ø–∞—Ä–∞—Ç —Å ID {obj_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

                print(f"üóë –£–¥–∞–ª—è–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç ID {obj_id}")

                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∏–∑ drugs_animals
                await session.execute(
                    text("DELETE FROM drugs_animals WHERE drug = :drug_id"),
                    {"drug_id": obj_id}
                )
                print("‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å–≤—è–∑–∏ –≤ drugs_animals")

                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∏–∑ drugs_users
                await session.execute(
                    text("DELETE FROM drugs_users WHERE drug_id = :drug_id"),
                    {"drug_id": obj_id}
                )
                print("‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å–≤—è–∑–∏ –≤ drugs_users")

                # –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–µ–ø–∞—Ä–∞—Ç
                await session.delete(obj)
                print("üóë –ü—Ä–µ–ø–∞—Ä–∞—Ç —É–¥–∞–ª–µ–Ω")

            await session.commit()
            return True




UPLOAD_DIR = "static/uploads/admin"
os.makedirs(UPLOAD_DIR, exist_ok=True)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

router = APIRouter()


def download_image_from_url(image_url: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    print(f"–°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")  
    
    try:
        response = requests.get(image_url, stream=True)
        response.raise_for_status()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        content_type = response.headers.get("Content-Type", "")
        if not content_type.startswith("image/"):
            print(f"–û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –≤–µ–¥–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! Content-Type: {content_type}")
            return image_url  # –ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º URL, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        extension = content_type.split("/")[-1] if "image" in content_type else "jpg"

        unique_filename = f"{uuid4()}.{extension}"
        file_path = os.path.join(UPLOAD_DIR, unique_filename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(file_path, "wb") as file:
            for chunk in response.iter_content(1024):
                file.write(chunk)

        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
        return f"/{UPLOAD_DIR}/{unique_filename}"  

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return image_url



@register(models.Manual)
class ManualAdminModel(SqlAlchemyModelAdmin):
    list_display = ("id", "title", "description", "image_url")
    list_display_links = ("id", "title")
    search_fields = ("title",)
    form_fields = {
        "title": "text",
        "description": "textarea",
        "image_url": "text",  
    }

    db_session_maker = database.AsyncSessionLocal

    async def orm_save_obj(self, id: int, payload: dict):
        """
        –ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
        """
        print(f" –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {payload}")  
        
        if "image_url" in payload and payload["image_url"].startswith("http"):
            print(f"–ù–∞–π–¥–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {payload['image_url']}")  
            payload["image_url"] = download_image_from_url(payload["image_url"])
        
        return await super().orm_save_obj(id, payload)
    
    async def orm_delete_obj(self, id: int):
        """
        –£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        print(f"–ü—ã—Ç–∞—é—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å ID: {id}") 

        sessionmaker = self.get_sessionmaker()
        async with sessionmaker() as session:
            obj = await session.get(self.model_cls, id)
            if obj:
                await session.delete(obj)
                await session.commit()
                print(f"–ó–∞–ø–∏—Å—å {id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã!")
            else:
                print(f"–ó–∞–ø–∏—Å—å {id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!")



@router.post("/admin/manuals/upload", tags=["Admin"])
async def admin_upload_manual_image(file: UploadFile = File(...)):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    file_name = f"{uuid.uuid4()}.{file.filename.split('.')[-1]}"
    file_path = f"static/uploads/admin/{file_name}"

    os.makedirs("static/uploads/admin", exist_ok=True)
    with open(file_path, "wb") as f:
        f.write(file.file.read())

    return {"file_path": f"/static/uploads/admin/{file_name}"}
