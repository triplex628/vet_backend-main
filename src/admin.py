from typing import Any
from fastapi import APIRouter, File, UploadFile, HTTPException
from fastadmin import SqlAlchemyModelAdmin, register
import requests
from sqlalchemy import text
from src import models
from src import database
import os
import uuid
from uuid import uuid4 

class CustomAdminModel(SqlAlchemyModelAdmin):
    async def orm_delete_obj(self, id: int) -> None:
        sessionmaker = self.get_sessionmaker()
        async with sessionmaker() as session:
            obj = await session.get(self.model_cls, id)
            if obj:
                await session.delete(obj)
                await session.commit()

#    async def orm_save_obj(self, id: int , payload: dict) -> Any:
        """This method is used to save orm/db model object.

        :params id: an id of object.
        :params payload: a dict of payload.
        :return: An object.
        """
 #        print("START PROCESS SAVE")
 #        sessionmaker = self.get_sessionmaker()
 #        async with sessionmaker() as session:
 #            if id:
 #                obj = await session.get(self.model_cls, id)
 #                if not obj:
 #                    return None
 #                for k, v in payload.items():
 #                    setattr(obj, k, v)
 #                await session.merge(obj)
 #                await session.commit()
 #            else:
 #                obj = self.model_cls(**payload)
 #                session.add(obj)
 #                await session.commit()
 #            return await session.get(self.model_cls, getattr(obj, self.get_model_pk_name(self.model_cls)))




@register(models.User)
class UserAdminModel(CustomAdminModel):
    list_display = ("id", "email", "is_admin", "is_active", "is_approved",
            "is_subscribed")
    list_display_links = ("id", "email")
    list_filter = ("id", "email", "is_admin", "is_active", "is_approved",
            "is_subscribed")
    search_fields = ("email",)

    
    db_session_maker = database.AsyncSessionLocal

    async def authenticate(self, username: str, password: str) -> int | None:
        db: Session = database.SessionLocal()
        result = db.execute(text("""select id, email, password from users where email = :email and password = :password and is_admin = true"""), {'email': username, 'password': password})
        result = result.mappings().first()
        if not result:
            return None

        return result.get('id')


@register(models.Animal)
class AnimalAdminModel(CustomAdminModel):
    list_display = ("id", "name", "drugs")
    list_display_links = ("id", "name")
    search_fields = ("name",)

    db_session_maker = database.AsyncSessionLocal


@register(models.Drug)
class DrugAdminModel(CustomAdminModel):
    list_display = ("id","name", "description", "is_global", )
    list_display_links = ("id", "name")
    search_fields = ("name",)
    
    db_session_maker = database.AsyncSessionLocal



UPLOAD_DIR = "static/uploads/admin"
os.makedirs(UPLOAD_DIR, exist_ok=True)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

router = APIRouter()


def download_image_from_url(image_url: str) -> str:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    """
    print(f"üîÑ –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")  # –û—Ç–ª–∞–¥–∫–∞
    
    try:
        response = requests.get(image_url, stream=True)
        response.raise_for_status()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        content_type = response.headers.get("Content-Type", "")
        if not content_type.startswith("image/"):
            print(f"‚ùå –û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–µ –≤–µ–¥–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! Content-Type: {content_type}")
            return image_url  # –ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º URL, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        extension = content_type.split("/")[-1] if "image" in content_type else "jpg"

        unique_filename = f"{uuid4()}.{extension}"
        file_path = os.path.join(UPLOAD_DIR, unique_filename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(file_path, "wb") as file:
            for chunk in response.iter_content(1024):
                file.write(chunk)

        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
        return f"/{UPLOAD_DIR}/{unique_filename}"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å

    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return image_url



@register(models.Manual)
class ManualAdminModel(SqlAlchemyModelAdmin):
    list_display = ("id", "title", "description", "image_url")
    list_display_links = ("id", "title")
    search_fields = ("title",)
    form_fields = {
        "title": "text",
        "description": "textarea",
        "image_url": "text",  # –í—Å—Ç–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    }

    db_session_maker = database.AsyncSessionLocal

    async def orm_save_obj(self, id: int, payload: dict):
        """
        –ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
        """
        print(f" –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {payload}")  # –û—Ç–ª–∞–¥–∫–∞
        
        if "image_url" in payload and payload["image_url"].startswith("http"):
            print(f"–ù–∞–π–¥–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {payload['image_url']}")  # –û—Ç–ª–∞–¥–∫–∞
            payload["image_url"] = download_image_from_url(payload["image_url"])
        
        return await super().orm_save_obj(id, payload)
    
    async def orm_delete_obj(self, id: int):
        """
        –£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        print(f"üóë –ü—ã—Ç–∞—é—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å ID: {id}")  # –û—Ç–ª–∞–¥–∫–∞

        sessionmaker = self.get_sessionmaker()
        async with sessionmaker() as session:
            obj = await session.get(self.model_cls, id)
            if obj:
                await session.delete(obj)
                await session.commit()
                print(f"‚úÖ –ó–∞–ø–∏—Å—å {id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã!")
            else:
                print(f"‚ùå –ó–∞–ø–∏—Å—å {id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î!")



@router.post("/admin/manuals/upload", tags=["Admin"])
async def admin_upload_manual_image(file: UploadFile = File(...)):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    """
    file_name = f"{uuid.uuid4()}.{file.filename.split('.')[-1]}"
    file_path = f"static/uploads/admin/{file_name}"

    os.makedirs("static/uploads/admin", exist_ok=True)
    with open(file_path, "wb") as f:
        f.write(file.file.read())

    return {"file_path": f"/static/uploads/admin/{file_name}"}
